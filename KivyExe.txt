python -m PyInstaller --name PymTag --icon images/app_icon.ico main.py
1. Open your command line shell and ensure that python is on the path (i.e. python works).

2. Create a folder into which the packaged app will be created. For example create a TouchApp folder and change to that directory with e.g. cd TouchApp. Then type:

You can also add an icon.ico file to the application folder in order to create an icon for the executable. If you don’t have a .ico file available, you can convert your icon.png file to ico using the web app ConvertICO. Save the icon.ico in the touchtracer directory and type:

python -m PyInstaller --name PyMTag --icon images\app_icon.ico main.py
For more options, please consult the PyInstaller Manual.

3. The spec file will be touchtracer.spec located in TouchApp. Now we need to edit the spec file to add the dependencies hooks to correctly build the exe. Open the spec file with your favorite editor and add these lines at the beginning of the spec (assuming sdl2 is used, the default now):

from kivy_deps import sdl2, glew
Then, find COLLECT() and add the data for touchtracer (touchtracer.kv, particle.png, …): Change the line to add a Tree() object, e.g. Tree('examples-path\\demo\\touchtracer\\'). This Tree will search and add every file found in the touchtracer directory to your final package.

To add the dependencies, before the first keyword argument in COLLECT add a Tree object for every path of the dependencies. E.g. *[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)] so it’ll look something like:

coll = COLLECT(exe, Tree('examples-path\\demo\\touchtracer\\'),
               a.binaries,
               a.zipfiles,
               a.datas,
               *[Tree(p) for p in (sdl2.dep_bins + glew.dep_bins)],
               strip=False,
               upx=True,
               name='PymTag')
4. Now we build the spec file in TouchApp with:

python -m PyInstaller touchtracer.spec
5. The compiled package will be in the TouchApp\dist\touchtracer directory.
